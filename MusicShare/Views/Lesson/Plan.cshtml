@using MusicShareWeb.Models.Lesson
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model MusicShareWeb.Models.Lesson.PlanModel

@{
    Layout = "../Shared/Layout.cshtml";
}

<div id="Plan" class="selfteacher__container clearfix">
    <div class="selfteacher__container_top mg-clearfix">
        <div class="selfteacher__container_top_title">Статистика</div>
        <div class="selfteacher__container_top_navigation clearfix">
            <div class="selfteacher__container_top_navigation_btn">
                @Html.Partial("Navigation/Plans", new PlanNavigationModel(Model.CurrentUser != null, Model.CurrentUser != null ? Model.CurrentUser.Id : (int?)null))
            </div>
            <div class="selfteacher__container_top_navigation_btn">
                <a class="mg-btn" href="@Url.Action("Train", new {planId = Model.Plan.Id})">Начать занятие</a>
            </div>
        </div>
    </div>
    <div class="selfteacher__stat-left-block">
        <div class="lesson-dropdown-navigation" style="margin-top: 0;">
            <div class="lesson-dropdown-navigation__guitar-techniques" data-bind="foreach: { data: $root.guitarTechniques, as: 'guitarTechnique' }">
                <div class="lesson-dropdown-navigation__guitar-technique">
                    <div class="lesson-dropdown-navigation__guitar-technique-name" data-bind="text: guitarTechnique.name, click: $root.toggleActiveGuitarTechnique, attr: { class: $root.activeGuitarTechnique() === guitarTechnique.id ? 'lesson-dropdown-navigation__guitar-technique-name lesson-dropdown-navigation__guitar-technique-name--active' : 'lesson-dropdown-navigation__guitar-technique-name' }"></div>
                    <!-- ko if: $root.activeGuitarTechnique() === guitarTechnique.id -->
                    <div class="lesson-dropdown-navigation__lessons" data-bind="foreach: { data: $root.getLessonByGuitarTechnique(guitarTechnique), as: 'lesson' }">
                        <div class="lesson-dropdown-navigation__lesson">
                            <div class="lesson-dropdown-navigation__lesson-name" data-bind="text: lesson.name, click: $root.toggleActiveLesson"></div>
                            <!-- ko if: $root.activeLesson() === lesson.id -->
                            <div class="lesson-dropdown-navigation__exercises" data-bind="foreach: { data: $root.getExercisesByLesson(lesson), as: 'exercise' }">
                                <div class="lesson-dropdown-navigation__exercise clearfix">
                                    <div class="lesson-dropdown-navigation__exercise-name" data-bind="text: exercise.name"></div>
                                    <div class="lesson-dropdown-navigation__exercise-checkbox clearfix">
                                        <input type="checkbox" data-bind="checked: $root.selectedExerciseIds[exercise.id], event: { change: $root.updateSelectedExrcises }" />
                                    </div>
                                </div>
                            </div>
                            <!-- /ko -->
                        </div>
                    </div>
                    <!-- /ko -->
                </div>
            </div>
        </div>
    </div>
    <div class="selfteacher__stat-right-block" style="padding-left: 50px;">
        <div>
            <input type="text" class="mg-input-text" data-bind="value: $root.planName" placeholder="Название плана" />
        </div>
        <div data-bind="sortable: $root.selectedExercises">
            <div class="plan-exercise">
                <div class="plan__exercise-name">
                    <span data-bind="text: $data.guitarTechniqueShortName + '. Урок ' + $data.lessonOrderNumber + '. ' + $data.exerciseName"></span>
                </div>
                <div class="plan__exercise-image-block">
                    <img data-bind="attr: { src: $data.imageUrl }" />
                    <div class="plan__remove-exercise" data-bind="click: $root.unselectExercise">
                        <i class="fa fa-arrow-left"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="plan__save-plan-block">
            <div class="mg-btn" data-bind="click: $root.savePlan">Сохранить изменения</div>
        </div>
    </div>
</div>

<script type="text/javascript">
//    ko.bindingHandlers.fadeVisible = {
//        init: function (element, valueAccessor) {
//            // Initially set the element to be instantly visible/hidden depending on the value
//            var value = valueAccessor();
//            $(element).toggle(ko.unwrap(value)); // Use "unwrapObservable" so we can handle values that may or may not be observable
//        },
//        update: function (element, valueAccessor) {
//            // Whenever the value subsequently changes, slowly fade the element in or out
//            var value = valueAccessor();
//            ko.unwrap(value) ? $(element).fadeIn() : $(element).fadeOut();
//        }
//    };

    $(document).ready(function () {
        ko.applyBindings(getPlan(@Html.Raw(JsonConvert.SerializeObject(Model, Formatting.Indented, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }))), document.getElementById("Plan"));
    });

    getPlan = function(data) {
        var model = {};

        model.plan = data.plan;
        model.guitarTechniques = data.guitarTechniques;
        model.lessons = data.lessons.sort(function(left, right) {
            return left.orderNumber - right.orderNumber;
        });
        model.exercises = data.exercises;

        model.planName = ko.observable(null);
        model.activeGuitarTechnique = ko.observable(undefined);
        model.activeLesson = ko.observable(undefined);
        model.selectedExerciseIds = {};
        model.exercises.forEach(function (exercise) {
            model.selectedExerciseIds[exercise.id] = ko.observable(false);
        });
        model.selectedExercises = ko.observableArray();

        var buildPlannedExercise = function (id, guitarTechniqueShortName, lessonOrderNumber, exerciseName, imageUrl) {
            return {
                id: id,
                guitarTechniqueShortName: guitarTechniqueShortName,
                lessonOrderNumber: lessonOrderNumber,
                exerciseName: exerciseName,
                imageUrl: imageUrl
            };
        };

        model.toggleActiveGuitarTechnique = function (guitarTechnique) {
            var guitarTechniqueId = guitarTechnique.id;
            if (model.activeGuitarTechnique() === guitarTechniqueId) {
                model.activeGuitarTechnique(undefined);
            } else {
                model.activeGuitarTechnique(guitarTechniqueId);
            }
        };
        model.toggleActiveLesson = function (lesson) {
            var lessonId = lesson.id;
            if (model.activeLesson() === lessonId) {
                model.activeLesson(undefined);
            } else {
                model.activeLesson(lessonId);
            }
        };
        model.getLessonByGuitarTechnique = function (guitarTechnique) {
            return model.lessons.filter(function (lesson) {
                return lesson.guitarTechniqueId === guitarTechnique.id;
            });
        };
        model.getExercisesByLesson = function (lesson) {
            return model.exercises.filter(function (exercise) {
                return exercise.lessonId === lesson.id;
            });
        };
        //
        // Жесткая жесть, связанная с порядком обработки change и click.
        // todo: переписать этот момент на более надежную механику.
        //
        model.updateSelectedExrcises = function(exercise) {
            if (!model.selectedExerciseIds[exercise.id]()) {
                var lesson = model.lessons.filter(function(lesson) {
                    return lesson.id === exercise.lessonId;
                })[0];
                var guitarTechnique = model.guitarTechniques.filter(function(guitarTechnique) {
                    return guitarTechnique.id === lesson.guitarTechniqueId;
                })[0];
                model.selectedExercises.push(buildPlannedExercise(exercise.id, guitarTechnique.shortName, lesson.orderNumber, exercise.name, exercise.imageUrl));
            } else {
                model.selectedExercises.remove(function (selectedExercise) {
                    return selectedExercise.id === exercise.id;
                });
            }
        }
        model.unselectExercise = function (exercise) {
            model.updateSelectedExrcises(model.exercises.filter(function (e) {
                return e.id === exercise.id;
            })[0]);
            model.selectedExerciseIds[exercise.id](false);
        }
        //

        var getAddedExerciseIds = function () {
            var addedExerciseIds = model.selectedExercises().map(function (selectedExercise) {
                return selectedExercise.id;
            });
            return addedExerciseIds;
        };
        model.savePlan = function() {
            if (model.plan) {
                $.ajax({
                    url: '@Url.Action("UpdatePlan")',
                    type: 'POST',
                    traditional: true,
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        id: model.plan.id,
                        name: model.planName(),
                        type: 1,
                        isPublic: true,
                        exerciseIds: getAddedExerciseIds()
                    }),
                    success: function() {
                        alert('Сохранено');
                    },
                    error: function () {
                        alert('Ошибка');
                        location.reload();
                    }
                });
            } else {
                $.ajax({
                    url: '@Url.Action("SavePlan")',
                    type: 'POST',
                    traditional: true,
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        name: model.planName(),
                        type: 1,
                        isPublic: true,
                        exerciseIds: getAddedExerciseIds()
                    }),
                    success: function (data) {
                        window.location.href = data.redirectUrl;
                    },
                    error: function () {
                        alert('Ошибка');
                    }
                });
            }
        };

        var init = function () {
            if (model.plan) {
                model.planName(model.plan.name);
                model.plan.exerciseIds.forEach(function (exerciseId) {
                    var exercise = model.exercises.filter(function (exercise) {
                        return exercise.id === exerciseId;
                    })[0];
                    var lesson = model.lessons.filter(function (lesson) {
                        return lesson.id === exercise.lessonId;
                    })[0];
                    var guitarTechnique = model.guitarTechniques.filter(function (guitarTechnique) {
                        return guitarTechnique.id === lesson.guitarTechniqueId;
                    })[0];
                    model.selectedExercises.push(buildPlannedExercise(exerciseId, guitarTechnique.shortName, lesson.orderNumber, exercise.name, exercise.imageUrl));

                    model.selectedExerciseIds[exerciseId](true);
                });
            }
        };
        init();

        return model;
    };
</script>