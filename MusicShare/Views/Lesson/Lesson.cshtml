@using System.Text.RegularExpressions
@model MusicShareWeb.Models.Lesson.LessonModel

@{
    Layout = "../Shared/Layout.cshtml";
    string text;
    const string ExerciseTag = "@@EXERCISE {0}@@";
    const string ReplacePattern = "<div data-bind=\"template: {{ name: 'ExerciseTemplate', data: {{'exerciseId': {0}, 'exerciseName': '{1}', 'audioUrl': '{2}', 'imageUrl': '{3}', 'min': {4} }} }}\"></div>";
}

<audio id="BitSound" preload="auto">
    <source src="/Content/bit.ogg" type='audio/ogg; codecs="vorbis"'>
    <source src="/Content/bit.mp3" type='audio/mpeg; codecs="mp3"'>
    <source src="/Content/bit.wav" type='audio/wav; codecs="1"'>
    <source src="/Content/bit.aac" type='audio/mp4; codecs="mp4a.40.5"'>
</audio>

<div class="lesson-layout">
    <div id="LessonPage" class="lesson-page">
        <div class="lesson">
            <div class="lesson-hierarchy">
                <a class="lesson-hierarchy__link" href="@Url.Action("Index", "Lesson", new {id = ""})">Самоучитель</a> > <a class="lesson-hierarchy__link" href="#">@Model.GutarTechique.Name</a>
            </div>
            <div class="lesson__name">
                Урок @Model.Lesson.OrderNumber. @Model.Lesson.Title
            </div>
            <div class="lesson__body">
                @if(Model.IsMinimized) {
                    text = String.Join("\n", Model.Exercises.Select(e => String.Format(ExerciseTag, e.Id)));
                } else {
                    text = Model.Lesson.Text;
                }
                @foreach (var exercise in Model.Exercises) {
                    var regex = new Regex(String.Format(ExerciseTag, exercise.Id));
                    text = regex.Replace(text, String.Format(ReplacePattern, exercise.Id, exercise.Name, !String.IsNullOrEmpty(exercise.AudioUrl) ? exercise.AudioUrl : "undefined", exercise.ImageUrl, Model.IsMinimized.ToString().ToLower()), 1);
                }
                @Html.Raw(text)
            </div>
        </div>
        <div class="lesson-additions">
            <div>
                <input type="button" class="save-exercises-speed" value="Сохранить изменения" data-bind="click: $root.saveSpeeds"/>
            </div>
            <div>
                @if(Model.IsMinimized) {
                    <a href="@Url.Action("Index", new {id = Model.Lesson.Id})" style="position: fixed; top: 300px;">К полной версии урока</a>
                }
                else {
                    <a href="@Url.Action("MinimizedLesson", new {id = Model.Lesson.Id})" style="position: fixed; top: 300px;">К сокращенной версии урока</a>
                }
            </div>
        </div>
    </div>
</div>

<script type="text/html" id="ExerciseTemplate">
    <div class="exercise">
        <!-- ko if: min -->
        <div class="exercise-toggle" data-bind="click: $root.toggle.bind($data, exerciseId)">
            <div class="exercise-toggle__icon" data-bind="text: $root.exerciseHide[exerciseId]() ? '+' : '-'"></div>
            <!-- ko if: $root.exerciseHide[exerciseId]() -->
            <span class="exercise-toggle__name" data-bind="text: exerciseName"></span>
            <!-- /ko -->
        </div>
        <!-- /ko -->
        <div data-bind="attr: {id: 'Exercise' + exerciseId}">
            <!-- ko if: audioUrl -->
            <div style="text-align: right;">
                <a data-bind="text: exerciseName, attr: {href: audioUrl}" target="_blank"></a>
            </div>
            <!-- /ko -->
            <!-- ko if: !audioUrl -->
            <div data-bind="text: exerciseName" style="text-align: right;"></div>
            <!-- /ko -->
            <p>
                <img data-bind="attr: {src: imageUrl}" />
            </p>
            <div class="metronome">
                <div class="metronome__speed-control">
                    <div class="speed-control__up" data-bind="click: $root.speedUp.bind($data, exerciseId)">+</div>
                    <div class="speed-control__down" data-bind="click: $root.speedDown.bind($data, exerciseId)">-</div>
                </div>
                <input type="text" class="metronome-speed" data-bind="value: $root.speeds[exerciseId], event: {'change': $root.speedChange.bind($data, exerciseId)}" />
                <div class="metronome-start-stop" data-bind="attr: {'value': $root.isRun() ? 'Остановить' : 'Запустить', class: $root.isRun() ? 'metronome-start-stop metronome-start-stop--start' : 'metronome-start-stop metronome-start-stop--stop'},
            click: $root.isRun() ? $root.stop.bind($data, exerciseId) : $root.run.bind($data, exerciseId)"></div>
            </div>
        </div>
    </div>
</script>



<script type="text/javascript">
    $(document).ready(function () {
        ko.applyBindings(getLesson(null, document.getElementById("Lesson")));
    });

    getLesson = function () {
        var model = {};
        model.bitSound = document.getElementById('BitSound');
        //        if (!model.bitSound.src) {
        //            model.bitSound.src = model.bitSound.currentSrc;
        //            alert('Пытаемся сыграть ' + model.bitSound.src + '\nСыграем? -- '+ model.bitSound.canPlayType('video/ogg;codecs="theora, vorbis"'));
        //        }
        model.isRun = ko.observable(false);
        model.speeds = {};
        @Html.Raw(String.Join("\n", Model.Speeds.Select(s => "model.speeds['" + s.Key + "'] = ko.observable(" + s.Value + ");")))
        model.activeSpeedIndex = ko.observable(undefined);
        model.loop = undefined;
        model.exerciseHide = {};
        @Html.Raw(String.Join("\n", Model.Exercises.Select(s => "model.exerciseHide['" + s.Id + "'] = ko.observable(false);")))
        model.toggle = function(exerciseId) {
            if (model.exerciseHide[exerciseId]()) {
                model.exerciseHide[exerciseId](false);
                $('#Exercise' + exerciseId).css('display', 'block');
            } else {
                model.exerciseHide[exerciseId](true);
                $('#Exercise' + exerciseId).css('display', 'none');
            }
        }
        model.speedUp = function (index) {
            var wasRun = model.isRun();
            model.stop();
            model.speeds[index](model.speeds[index]() + 1.0);
            if (wasRun) {
                model.run(index);
            }
        }
        model.speedDown = function (index) {
            var wasRun = model.isRun();
            model.stop();
            model.speeds[index](model.speeds[index]() - 1.0);
            if (wasRun) {
                model.run(index);
            }
        }
        model.speedChange = function (index) {
            var wasRun = model.isRun();
            model.stop();
            model.speeds[index](parseInt(model.speeds[index](), 10));
            if (wasRun) {
                model.run(index);
            }
        }
        model.run = function (index) {
            model.activeSpeedIndex(index);
            model.isRun(true);
        }
        model.stop = function () {
            model.isRun(false);
        }
        var playSound = function () {
            model.bitSound.play();
        }
        model.isRun.subscribe(function() {
            if (model.isRun()) {
                var time = 60.0 / model.speeds[model.activeSpeedIndex()]() * 1000.0;
                playSound();
                model.loop = setInterval(playSound, time);
            } else {
                clearInterval(model.loop);
            }
        });
        model.saveSpeeds = function () {
            var speeds = {};
            var keys = Object.keys(model.speeds);
            for (var i = 0; i < keys.length; i++) {
                speeds[keys[i].toString()] = model.speeds[keys[i]]().toString();
            }
            $.ajax({
                url: '@Url.Action("SaveExercisesSpeed")',
                type: 'POST',
                traditional: true,
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    lessonId: @Model.Lesson.Id,
                    speeds: speeds
                }),
                success: function (result) {
                    alert('Сохранено');
                },
                error: function (result) {
                    alert('Ошибка');
                }
            });
            return false;
        };

        return model;
    }
</script>