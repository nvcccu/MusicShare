@using System.Text.RegularExpressions
@using Core.Enums
@using MusicShareWeb.Models.Lesson
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model LessonModel

@{
    ViewBag.Title = Model.Lesson.Title;
    ViewBag.Keywords = Model.Lesson.Keywords;
    ViewBag.Description = Model.Lesson.Description;
    Layout = "../Shared/Layout.cshtml";
    string text;
    const string ExerciseTag = "@@EXERCISE {0}@@";
    const string ReplacePattern = "<div data-bind=\"template: {{ name: 'ExerciseTemplate', data: {{'exerciseId': {0}, 'exerciseName': '{1}', 'audioUrl': '{2}', 'imageUrl': '{3}', 'min': {4} }} }}\"></div>";
}

<audio id="BitSound" preload="auto">
    <source src="/Content/bit.ogg" type='audio/ogg; codecs="vorbis"'>
    <source src="/Content/bit.mp3" type='audio/mpeg; codecs="mp3"'>
    <source src="/Content/bit.wav" type='audio/wav; codecs="1"'>
    <source src="/Content/bit.aac" type='audio/mp4; codecs="mp4a.40.5"'>
</audio>

<div class="lesson-container">
    <div class="selfteacher__container_top mg-clearfix">
        <div class="selfteacher__container_top_title">
            <div style="font-size: 14px;">Автор: Rig Raizon</div>
            <div style="font-size: 14px;">
                Источник: <a class="mg-link" href="@Model.Lesson.OriginalLessonUrl">Allfrets.ru</a>
            </div>
        </div>
        <div class="selfteacher__container_top_navigation clearfix">
            <div class="selfteacher__container_top_navigation_btn">
                @Html.Partial("Navigation/Lessons", new LessonNavigationModel(Model.Lesson))
            </div>
            <div class="selfteacher__container_top_navigation_btn">
                @Html.Partial("Navigation/Stat")
            </div>
            <div class="selfteacher__container_top_navigation_btn">
                @Html.Partial("Navigation/Plans", new PlanNavigationModel(Model.CurrentUser != null, Model.CurrentUser != null ? Model.CurrentUser.Id : (int?) null))
            </div>
        </div>
    </div>
    <div id="LessonPage" class="lesson-index__lesson-navigation">
        <div class="lesson__body">
            <div class="lesson__order-number">Урок @Model.Lesson.OrderNumber</div>
            <div class="lesson__name">@Model.Lesson.Name</div>
            @if(Model.IsMinimized) {
                text = String.Join("\n", Model.Exercises.Select(e => String.Format(ExerciseTag, e.Id)));
            } else {
                text = Model.Lesson.Text;
            }
            @foreach(var exercise in Model.Exercises) {
                var regex = new Regex(String.Format(ExerciseTag, exercise.Id));
                text = regex.Replace(text, String.Format(ReplacePattern, exercise.Id, exercise.Name, !String.IsNullOrEmpty(exercise.AudioUrl) ? exercise.AudioUrl : null, exercise.ImageUrl, Model.IsMinimized.ToString().ToLower()), 1);
            }
            @Html.Raw(text)
        </div>
    </div>
    <div class="lesson-zone__right-container">
        <div class="right-container__content">
            <div class="lesson__nav-menu">
                @Html.Partial("Navigation/SideNavigation", new SideNavigationModel(Model.CurrentUser != null, Model.Lesson, Model.Exercises != null && Model.Exercises.Any(), Model.IsMinimized))
            </div>
        </div>
    </div>
</div>

@Html.Partial("Exercise")

<script type="text/javascript">
    $(window).bind('scroll resize', function () {
        if (window.pageYOffset > 160) {
            $('.right-container__content').addClass('right-container__content--float');
        } else {
            $('.right-container__content').removeClass('right-container__content--float');
        }
    });

    $(document).ready(function () {
        ko.applyBindings(getLesson(@Html.Raw(JsonConvert.SerializeObject(Model, Formatting.Indented, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }))), document.getElementById("Lesson"));
    });

    getLesson = function (data) {
        var model = {};
        model.bitSound = document.getElementById('BitSound');
        //        if (!model.bitSound.src) {
        //            model.bitSound.src = model.bitSound.currentSrc;
        //            alert('Пытаемся сыграть ' + model.bitSound.src + '\nСыграем? -- '+ model.bitSound.canPlayType('video/ogg;codecs="theora, vorbis"'));
        //        }
        model.isRun = ko.observable(false);
        model.isAuth = @Json.Encode(Model.CurrentUser != null && Model.CurrentUser.IsAuthorized);
        model.speeds = {};
        @Html.Raw(String.Join("\n", Model.Speeds.Select(s => "model.speeds['" + s.Key + "'] = ko.observable(" + s.Value + ");")))
        model.activeSpeedIndex = ko.observable(undefined);
        model.lastActiveSpeedIndex = ko.observable(undefined);
        model.loop = undefined;
        model.exerciseHide = {};
        @Html.Raw(String.Join("\n", Model.Exercises.Select(s => "model.exerciseHide['" + s.Id + "'] = ko.observable(false);")))
        model.exercises = data.exercises;
        model.plans = data.plans;
        model.addExerciseToPlanVisible = {};
        Object.keys(model.exercises).forEach(function (key) {
            var exercise = model.exercises[key];
            model.addExerciseToPlanVisible[exercise.id] = ko.observable(false);
        });
        model.setAddExerciseToPlanVisible = function (exerciseId, val) {
            model.addExerciseToPlanVisible[exerciseId](val);
        };
        model.toggle = function (exerciseId) {
            if (model.exerciseHide[exerciseId]()) {
                model.exerciseHide[exerciseId](false);
                $('#Exercise' + exerciseId).css('display', 'block');
            } else {
                model.exerciseHide[exerciseId](true);
                $('#Exercise' + exerciseId).css('display', 'none');
            }
        }
        model.speedUp = function (index) {
            var wasRun = model.isRun();
            model.stop();
            model.speeds[index](model.speeds[index]() + 1.0);
            if (wasRun && index === model.activeSpeedIndex()) {
                model.run(index);
            }
        }
        model.speedDown = function (index) {
            var wasRun = model.isRun();
            model.stop();
            model.speeds[index](model.speeds[index]() - 1.0);
            if (wasRun && index === model.activeSpeedIndex()) {
                model.run(index);
            }
        }
        model.speedChange = function (index) {
            var wasRun = model.isRun();
            model.stop();
            model.speeds[index](parseInt(model.speeds[index](), 10));
            if (wasRun && index === model.activeSpeedIndex()) {
                model.run(index);
            }
        }
        $(window).keypress(function(e) {
            if (e.keyCode === 0 || e.keyCode === 32) {
                if (model.isRun()) {
                    model.stop();
                } else if(model.lastActiveSpeedIndex()) {
                    model.run(model.lastActiveSpeedIndex());
                }
                return false;
            }
        });
        model.run = function (index) {
            model.activeSpeedIndex(index);
            model.lastActiveSpeedIndex(model.activeSpeedIndex());
            model.isRun(true);
        }
        model.stop = function () {
            model.isRun(false);
        }
        var playSound = function () {
            model.bitSound.play();
        }
        model.isRun.subscribe(function () {
            if (model.isRun()) {
                var time = 60.0 / model.speeds[model.activeSpeedIndex()]() * 1000.0;
                playSound();
                model.loop = setInterval(playSound, time);
            } else {
                clearInterval(model.loop);
            }
        });
        model.saveSpeeds = function () {
            if (!model.isAuth) {
                alert('Для сохранения скорости метронома необходимо зарегистрироваться');
                return false;
            }
            var speeds = {};
            var keys = Object.keys(model.speeds);
            for (var i = 0; i < keys.length; i++) {
                speeds[keys[i].toString()] = model.speeds[keys[i]]().toString();
            }
            $.ajax({
                url: '@Url.Action("SaveExercisesSpeed")',
                type: 'POST',
                traditional: true,
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    speeds: speeds
                }),
                success: function (result) {
                    musGround.logger.logAction(@ActionId.SaveSpeedFromLesson);
                    alert('Сохранено');
                },
                error: function (result) {
                    alert('Ошибка');
                }
            });
            return false;
        };
        model.addExerciseToPlan = function (planId, exerciseId) {
            $.ajax({
                url: '@Url.Action("AddExrciseToPlan")',
                type: 'POST',
                data: {
                    planId: planId,
                    exerciseId: exerciseId
                },
                success: function () {
                    alert('Упражнение добавлено');
                },
                error: function (result) {
                    alert('Ошибка');
                }
            });
            return false;
        };
        model.saveHomework = function() {
            $.ajax({
                url: '@Url.Action("SaveHomework")',
                type: 'POST',
                data: {
                    lessonId: @Model.Lesson.Id,
                    link: $('#HomeworkLink').val()
                },
                success: function () {
                    alert('Как только запись будет рассмотрена, мы вышлем рекомендации на ваш адрес электронной почты.');
                },
                error: function () {
                    alert('Ошибка');
                }
            });
            return false;
        }

        return model;
    }
</script>