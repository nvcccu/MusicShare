@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model MusicShareWeb.Models.Lesson.PlanModel

@{
    Layout = "../Shared/Layout.cshtml";
}

<div id="Plan">
    @if (Model.CurrentUser == null)
    {
        <span>Для составления плана занятий необходимо зарегистрироваться.</span>
    }
    else
    {
        <div class="plan-layout">
            <div class="plan">
                <div class="plan__all-exercises" data-bind="foreach: { data: $root.sortedGuitarTechniques, as: 'guitarTechnique' }">
                    <div class="all-exercises__guitar-technique">
                        <span class="plan__toggle">&#9660;</span><span data-bind="text: guitarTechnique.name"></span>
                        <div data-bind="foreach: { data: $root.getLessonByGuitarTechnique(guitarTechnique), as: 'lesson' }">
                            <div class="guitar-technique__lesson">
                                <span class="plan__toggle">&#9660;</span><span data-bind="text: lesson.name"></span>
                                <div data-bind="foreach: { data: $root.getExercisesByLesson(lesson), as: 'exercise' }">
                                    <div class="lesson__exercise">
                                        <div>
                                            <div>
                                                <span class="plan__toggle">&#9660;</span>
                                                <span data-bind="text: exercise.name"></span>
                                                <span class="plan__add-exercise" data-bind="visible: !$root.exerciseWasAdded(exercise.id), click: $root.addExercise.bind($data, exercise.id, guitarTechnique.shortName, lesson.orderNumber, exercise.name)">&#8658;</span>
                                            </div>
                                            <div>
                                                <img data-bind="attr: { 'src' : exercise.imageUrl }" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="plan__selected-exercises" data-bind="foreach: { data: $root.addedExercises(), as: 'exercise' }">
                    <div>
                        <span class="plan__toggle" data-bind="click: $root.removeExercise.bind($data, exercise.id)">&#215;</span>
                        <span data-bind="text: exercise.guitarTechniqueShortName + '. Урок ' + exercise.lessonOrderNumber + '. ' + exercise.exerciseName"></span>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<script type="text/javascript">
    $(document).ready(function () {
        ko.applyBindings(getLesson(@Html.Raw(JsonConvert.SerializeObject(Model, Formatting.Indented, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }))), document.getElementById("Plan"));
    });

    getLesson = function (data) {
        var model = {};
        model.guitarTechniques = data.guitarTechniques;
        model.lessons = data.lessons;
        model.exercises = data.exercises;
        model.speeds = data.speeds;
        model.sortedGuitarTechniques = model.guitarTechniques.sort(function (a, b) {
            return a.id - b.id;
        });

        var getPlannedExercise = function (id, guitarTechniqueShortName, lessonOrderNumber, exerciseName) {
            return {
                id: id,
                guitarTechniqueShortName: guitarTechniqueShortName,
                lessonOrderNumber: lessonOrderNumber,
                exerciseName: exerciseName
            };
        };

        model.addedExercises = ko.observableArray(null);
        model.getLessonByGuitarTechnique = function (guitarTechnique) {
            return model.lessons.filter(function (lesson) {
                return lesson.guitarTechniqueId === guitarTechnique.id;
            }).sort(function (a, b) {
                return a.orderNumber - b.orderNumber;
            });
        };
        model.getExercisesByLesson = function (lesson) {
            return model.exercises.filter(function (exercise) {
                return exercise.lessonId === lesson.id;
            }).sort(function (a, b) {
                return a.id - b.id;
            });
        };
        model.addExercise = function(id, guitarTechniqueShortName, lessonOrderNumber, exerciseName) {
            model.addedExercises.push(getPlannedExercise(id, guitarTechniqueShortName, lessonOrderNumber, exerciseName));
        };
        model.removeExercise = function(id) {
            model.addedExercises.remove(function(exercise) {
                return exercise.id === id;
            });
        };
        model.exerciseWasAdded = function(exerciseId) {
            return model.addedExercises().filter(function(exercise) {
                return exercise.id === exerciseId;
            }).length > 0;
        };

        return model;
    };
</script>