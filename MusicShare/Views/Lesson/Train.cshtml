@using Core.Enums
@using MusicShareWeb.Models.Lesson
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model MusicShareWeb.Models.Lesson.TrainModel

@{
    Layout = "../Shared/Layout.cshtml";
}

@Html.Partial("ExerciseForTrain")

<audio id="BitSound" preload="auto">
    <source src="/Content/bit.ogg" type='audio/ogg; codecs="vorbis"'>
    <source src="/Content/bit.mp3" type='audio/mpeg; codecs="mp3"'>
    <source src="/Content/bit.wav" type='audio/wav; codecs="1"'>
    <source src="/Content/bit.aac" type='audio/mp4; codecs="mp4a.40.5"'>
</audio>

<div id="Train" class="lesson-container">
    @if (Model.CurrentUser == null) {
        <span>Для загрузки данных плана занятий необходимо войти на сайт.</span>
    } else {
         <div class="selfteacher__container_top mg-clearfix">
             <div class="selfteacher__container_top_title">@Model.Plan.Name</div>
             <div class="selfteacher__container_top_navigation clearfix">
                 <div class="selfteacher__container_top_navigation_btn">
                     @Html.Partial("Navigation/Stat")
                 </div>
                 <div class="selfteacher__container_top_navigation_btn">
                     @Html.Partial("Navigation/Lessons", new LessonNavigationModel())
                 </div>
                 <div class="selfteacher__container_top_navigation_btn">
                     @Html.Partial("Navigation/Plans", new PlanNavigationModel(Model.CurrentUser != null, Model.CurrentUser != null ? Model.CurrentUser.Id : (int?) null))
                 </div>
             </div>
        </div>
        <div class="lesson-index__lesson-navigation">
            <div class="plan__all-exercises" data-bind="foreach: { data: $root.exercises, as: 'exercise' }">
                <div data-bind="template: { name: 'ExerciseTemplate', data: {'exerciseId': exercise.id, 'exerciseName': $root.getExerciseTitle(exercise), 'audioUrl': exercise.audioUrl, 'imageUrl': exercise.imageUrl, 'min': false } }"></div>
            </div>
        </div>
        <div class="lesson-zone__right-container">
            <div class="right-container__content">
                <div class="lesson-outer-navigation-block">
                    <a class="mg-btn" href="@Url.Action("Plan", new {id = Model.Plan.Id})">Редактировать план</a>
                </div>
                <div class="lesson-outer-navigation-block">
                    <div class="mg-btn" data-bind="click: $root.saveSpeeds">Сохранить изменения</div>
                </div>
            </div>
        </div>
    }
</div>

<script type="text/javascript">
    $(document).ready(function () {
        ko.applyBindings(getTrain(@Html.Raw(JsonConvert.SerializeObject(Model, Formatting.Indented, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }))), document.getElementById("Train"));
    });

    getTrain = function (data) {
        var model = {};
        model.guitarTechniques = data.guitarTechniques;
        model.lessons = data.lessons;
        model.exercises = data.exercises;
        model.speeds = data.speeds;
        model.isAuth = @Json.Encode(Model.CurrentUser != null && Model.CurrentUser.IsAuthorized);

        model.bitSound = document.getElementById('BitSound');
        //        if (!model.bitSound.src) {
        //            model.bitSound.src = model.bitSound.currentSrc;
        //            alert('Пытаемся сыграть ' + model.bitSound.src + '\nСыграем? -- '+ model.bitSound.canPlayType('video/ogg;codecs="theora, vorbis"'));
        //        }
        model.isRun = ko.observable(false);
        model.speeds = {};
        @Html.Raw(String.Join("\n", Model.Speeds.Select(s => "model.speeds['" + s.Key + "'] = ko.observable(" + s.Value + ");")))
        model.activeSpeedIndex = ko.observable(undefined);
        model.loop = undefined;
        model.exerciseHide = {};
        @Html.Raw(String.Join("\n", Model.Exercises.Select(s => "model.exerciseHide['" + s.Id + "'] = ko.observable(false);")))
        model.toggle = function(exerciseId) {
            if (model.exerciseHide[exerciseId]()) {
                model.exerciseHide[exerciseId](false);
                $('#Exercise' + exerciseId).css('display', 'block');
            } else {
                model.exerciseHide[exerciseId](true);
                $('#Exercise' + exerciseId).css('display', 'none');
            }
        }
        model.speedUp = function (index) {
            var wasRun = model.isRun();
            model.stop();
            model.speeds[index](model.speeds[index]() + 1.0);
            if (wasRun && index === model.activeSpeedIndex()) {
                model.run(index);
            }
        }
        model.speedDown = function (index) {
            var wasRun = model.isRun();
            model.stop();
            model.speeds[index](model.speeds[index]() - 1.0);
            if (wasRun && index === model.activeSpeedIndex()) {
                model.run(index);
            }
        }
        model.speedChange = function (index) {
            var wasRun = model.isRun();
            model.stop();
            model.speeds[index](parseInt(model.speeds[index](), 10));
            if (wasRun && index === model.activeSpeedIndex()) {
                model.run(index);
            }
        }
        model.run = function (index) {
            model.activeSpeedIndex(index);
            model.isRun(true);
        }
        model.stop = function () {
            model.isRun(false);
        }
        var playSound = function () {
            model.bitSound.play();
        }
        model.isRun.subscribe(function() {
            if (model.isRun()) {
                var time = 60.0 / model.speeds[model.activeSpeedIndex()]() * 1000.0;
                playSound();
                model.loop = setInterval(playSound, time);
            } else {
                clearInterval(model.loop);
            }
        });
        model.saveSpeeds = function () {
            if (!model.isAuth) {
                alert('Для сохранения скорости метронома необходимо зарегистрироваться');
                return false;
            }
            var speeds = {};
            var keys = Object.keys(model.speeds);
            for (var i = 0; i < keys.length; i++) {
                speeds[keys[i].toString()] = model.speeds[keys[i]]().toString();
            }
            $.ajax({
                url: '@Url.Action("SaveExercisesSpeed")',
                type: 'POST',
                traditional: true,
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    speeds: speeds
                }),
                success: function (result) {
                    musGround.logger.logAction(@ActionId.SaveSpeedFromTrain);
                    alert('Сохранено');
                },
                error: function (result) {
                    alert('Ошибка');
                }
            });
            return false;
        };

        model.getExerciseTitle = function (exercise) {
            var lesson = model.lessons.filter(function (lesson) {
                return exercise.lessonId === lesson.id;
            })[0];
            var guitarTechnique = model.guitarTechniques.filter(function (guitarTechnique) {
                return lesson.guitarTechniqueId === guitarTechnique.id;
            })[0];
            return guitarTechnique.shortName + ' ' + lesson.name + '. ' + exercise.name;
        };

        $(window).bind('scroll resize', function () {
            if (window.pageYOffset > 160) {
                $('.right-container__content').addClass('right-container__content--float');
            } else {
                $('.right-container__content').removeClass('right-container__content--float');
            }
        });

        return model;
    };
</script>