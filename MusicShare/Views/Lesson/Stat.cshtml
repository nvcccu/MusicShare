@using MusicShareWeb.Models.Lesson
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model MusicShareWeb.Models.Lesson.StatModel

@{
    Layout = "../Shared/Layout.cshtml";
}

<div id="Stat" class="selfteacher__container clearfix">
    <div class="selfteacher__container_top mg-clearfix">
        <div class="selfteacher__container_top_title">Статистика</div>
        <div class="selfteacher__container_top_navigation">
            <div class="selfteacher__container_top_navigation_btn">
                @Html.Partial("Navigation/Lessons", new LessonNavigationModel())
            </div>
            <div class="selfteacher__container_top_navigation_btn">
                @Html.Partial("Navigation/Plans", new PlanNavigationModel(Model.CurrentUser != null, Model.CurrentUser != null ? Model.CurrentUser.Id : (int?)null))
            </div>
        </div>
    </div>
    <div class="selfteacher__stat-left-block">
        @if(Model.CurrentUser != null) {
            <div class="stat-type-select">
                <div data-bind="click: $root.setStatMode.bind($data, $root.statModes.speed), attr: { class: $root.statMode() == $root.statModes.speed ? 'stat-type-select__btn stat-type-select__btn--active' : 'stat-type-select__btn' }">Скорость</div>
                <div data-bind="click: $root.setStatMode.bind($data, $root.statModes.time), attr: { class: $root.statMode() == $root.statModes.time ? 'stat-type-select__btn stat-type-select__btn--active' : 'stat-type-select__btn' }">Время</div>
            </div>
            <div class="lesson-dropdown-navigation">
                <div class="lesson-dropdown-navigation__guitar-techniques" data-bind="foreach: { data: $root.guitarTechniques, as: 'guitarTechnique' }">
                    <div class="lesson-dropdown-navigation__guitar-technique">
                        <div class="lesson-dropdown-navigation__guitar-technique-name" data-bind="text: guitarTechnique.name, click: $root.toggleActiveGuitarTechnique, attr: { class: $root.activeGuitarTechnique() === guitarTechnique.id ? 'lesson-dropdown-navigation__guitar-technique-name lesson-dropdown-navigation__guitar-technique-name--active' : 'lesson-dropdown-navigation__guitar-technique-name' }"></div>
                        <!-- ko if: $root.activeGuitarTechnique() === guitarTechnique.id -->
                        <div class="lesson-dropdown-navigation__lessons" data-bind="foreach: { data: $root.getLessonByGuitarTechnique(guitarTechnique), as: 'lesson' }">
                            <div class="lesson-dropdown-navigation__lesson">
                                <div class="lesson-dropdown-navigation__lesson-name" data-bind="text: lesson.name, click: $root.toggleActiveLesson"></div>
                                <!-- ko if: $root.activeLesson() === lesson.id -->
                                <div class="lesson-dropdown-navigation__exercises" data-bind="foreach: { data: $root.getExercisesByLesson(lesson), as: 'exercise' }">
                                    <div class="lesson-dropdown-navigation__exercise clearfix">
                                        <div class="lesson-dropdown-navigation__exercise-name" data-bind="text: exercise.name"></div>
                                        <div class="lesson-dropdown-navigation__exercise-checkbox clearfix">
                                            <input type="checkbox" data-bind="checked: $root.drawExercise[exercise.id]"/>
                                        </div>
                                        <div class="exercise-img-preshow-form">
                                            <div class="triangle-left" style="left: -2px; top: 20px;"></div>
                                            <div class="exercise-img-preshow-block">
                                                <div class="exercise-img-preshow">
                                                    <img data-bind="attr: { src: exercise.imageUrl }" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-- /ko -->
                            </div>
                        </div>
                        <!-- /ko -->
                    </div>
                </div>
            </div>
        } else {
            <div>Войдите в систему, чтобы начать пользоваться системой статистики</div>
        }
    </div>
    <div class="selfteacher__stat-right-block">
        @if(Model.CurrentUser != null) {
            <div id="linechart_material" data-bind="visible: $root.anyExerciseSelected()">
            </div>
            <!-- ko ifnot: $root.anyExerciseSelected() -->
            <div class="selfteacher-stat__graph">
                Для построения графика выберите<br>
                упражнения в списке слева
            </div>
            <!-- /ko -->
            <div class="selfteacher-stat__graph-settings clearfix">
                <div class="graph-settings__interval">
                    Неделя <input type="radio" name="graphInterval" data-bind="checked: $root.graphInterval, checkedValue: $root.graphIntervals.week"/>
                </div>
                <div class="graph-settings__interval">
                    Месяц <input type="radio" name="graphInterval" data-bind="checked: $root.graphInterval, checkedValue: $root.graphIntervals.month"/>
                </div>
                <div class="graph-settings__interval">
                    Полгода <input type="radio" name="graphInterval" data-bind="checked: $root.graphInterval, checkedValue: $root.graphIntervals.halfYear"/>
                </div>
            </div>
            <div class="selfteacher-stat__presets-block">
                <div class="presets-block__title">Сохраненные наборы</div>
                <!-- ko if: $root.statPresets().length > 0 -->
                <div class="presets-block__presets" data-bind="foreach: { data: $root.statPresets(), as: 'statPreset' }">
                    <div data-bind="click: $root.activeStatPreset() !== statPreset.id ? $root.setActiveStatPreset : '', attr: { class: $root.activeStatPreset() === statPreset.id ? 'presets-block__preset presets-block__preset--active clearfix' : 'presets-block__preset clearfix' }">
                        <div data-bind="visible: $root.changedPresetId() === statPreset.id">
                            <input type="text" class="mg-input-text" data-bind="value: $root.changedPresetName" />
                            <i class="fa fa-check" data-bind="click: $root.updateStatPresetName"></i>
                            <i class="fa fa-close" data-bind="click: $root.closeUpdateStat"></i>
                        </div>
                        <div class="preset__name" data-bind="visible: $root.changedPresetId() !== statPreset.id, text: statPreset.name()"></div>
                        <div class="preset__change-name" data-bind="click: $root.changePresetName, clickBubble: false">
                            <div class="preset__change-name-inner">Изменить название</div>
                        </div>
                        <div class="preset__actions">
                            <div class="preset__action" data-bind="click: function() {}, clickBubble: false">
                                <i class="fa fa-trash-o" data-bind="click: $root.deleteStatPreset.bind($data, statPreset.id), clickBubble: false"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- /ko-->
                <!-- ko ifnot: $root.statPresets().length > 0 -->
                <div class="presets-block__presets">
                    Не добавлено ни одного набора упражнений
                </div>
                <!-- /ko-->
                <div class="presets__new-preset-block">
                    <div class="presets__new-preset-name">
                        <input type="text" class="mg-input-text" placeholder="Название набора" data-bind="value: $root.newStatPresetName"/>
                    </div>
                    <div class="mg-btn presets__new-preset-save-btn" data-bind="click: $root.saveStatPreset">Сохранить набор</div>
                </div>
            </div>
        }
    </div>
</div>

<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript">
    google.load('visualization', '1.1', { packages: ['line'] });
    $(document).ready(function () {
        ko.applyBindings(getStat(@Html.Raw(JsonConvert.SerializeObject(Model, Formatting.Indented, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }))), document.getElementById("Stat"));
    });

    getStat = function (data) {
        var model = {};
        var graphData = undefined;
        var chart = undefined;
        var options = undefined;
        model.guitarTechniques = data.guitarTechniques;
        model.lessons = data.lessons;
        model.exercises = data.exercises;
        model.statPresets = ko.observableArray(data.statPresets);
        model.statPresets().forEach(function (statPreset) {
            statPreset.name = ko.observable(statPreset.name);
        });
        model.changedPresetId = ko.observable(null);
        model.changedPresetName = ko.observable(null);
        //
        model.statModes = {
            speed: 0,
            time: 1
        };
        model.graphIntervals = {
            week: 7,
            month: 31,
            halfYear: 182
        };
        model.newStatPresetName = ko.observable(undefined);
        model.statMode = ko.observable(model.statModes.speed);
        model.activeGuitarTechnique = ko.observable(undefined);
        model.activeLesson = ko.observable(undefined);
        model.activeStatPreset = ko.observable(undefined);
        model.graphInterval = ko.observable(model.graphIntervals.week);

        model.saveStatPreset = function () {

        };
        model.setStatMode = function (statMode) {
            model.statMode(statMode);
        }
        model.toggleActiveGuitarTechnique = function (guitarTechnique) {
            var guitarTechniqueId = guitarTechnique.id;
            if (model.activeGuitarTechnique() === guitarTechniqueId) {
                model.activeGuitarTechnique(undefined);
            } else {
                model.activeGuitarTechnique(guitarTechniqueId);
            }
        };
        model.toggleActiveLesson = function (lesson) {
            var lessonId = lesson.id;
            if (model.activeLesson() === lessonId) {
                model.activeLesson(undefined);
            } else {
                model.activeLesson(lessonId);
            }
        };
        model.drawExercise = [];
        model.exercises.forEach(function (exercise) {
            model.drawExercise[exercise.id.toString()] = ko.observable(false);
        });
        model.anyExerciseSelected = ko.computed(function () {
            return model.drawExercise.filter(function (needDraw) {
                return needDraw();
            }).length > 0;
        });
        model.setActiveStatPreset = function (statPreset) {
            model.changedPresetId(null);
            model.activeStatPreset(statPreset.id);
            model.exercises.forEach(function (exercise) {
                model.drawExercise[exercise.id](false);
            });
            statPreset.exercises.forEach(function (exerciseId) {
                model.drawExercise[exerciseId](true);
            });
        }
        model.changePresetName = function (statPreset) {
            model.changedPresetId(statPreset.id);
            var index = model.statPresets().findIndex(function (sp) {
                return sp.id === statPreset.id;
            });
            model.changedPresetName(model.statPresets()[index].name());
            return false;
        }
        model.deleteStatPreset = function(statPresetId) {
            $.ajax({
                url: '@Url.Action("DeleteStatPreset")',
                type: 'POST',
                data: {
                    statPresetId: statPresetId
                },
                success: function(result) {
                    if (result.success === true) {
                        model.statPresets.remove(function(statPreset) {
                            return statPreset.id === statPresetId;
                        });
                    } else {
                        alert('Ошибка');
                    }
                },
                error: function() {
                    alert('Ошибка');
                }
            });
        };
        model.closeUpdateStat = function() {
            model.changedPresetName(null);
            model.changedPresetId(null);
        };
        model.updateStatPresetName = function (statPreset) {
            $.ajax({
                url: '@Url.Action("UpdateStatPreset")',
                type: 'POST',
                data: {
                    id: statPreset.id,
                    name: model.changedPresetName()
                },
                success: function (result) {
                    if (result.success === true) {
                        var index = model.statPresets().findIndex(function (sp) {
                            return sp.id === statPreset.id;
                        });
                        model.statPresets()[index].name(model.changedPresetName());
                    } else {
                        alert('Ошибка');
                    }
                    model.changedPresetName(null);
                    model.changedPresetId(null);
                },
                error: function () {
                    alert('Ошибка');
                }
            });
        }
        model.saveStatPreset = function () {
            $.ajax({
                url: '@Url.Action("SaveStatPreset")',
                type: 'POST',
                traditional: true,
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    statPreset: { name: model.newStatPresetName() },
                    exercises: model.drawExercise
                        .map(function (needDraw, exerciseId) {
                            return {
                                exerciseId: exerciseId,
                                needDraw: needDraw()
                            };
                        })
                        .filter(function (tmp) {
                            return tmp.needDraw;
                        }).map(function (tmp) {
                            return tmp.exerciseId.toString();
                        })
                }),
                success: function (result) {
                    if (result.success === true) {
                        model.statPresets.push({
                            id: result.statPreset.Id,
                            ownerAccountId: result.statPreset.OwnerAccountId,
                            name: ko.observable(result.statPreset.Name),
                            exercises: result.statPreset.Exercises
                        });
                    } else {
                        alert('Ошибка');
                    }
                },
                error: function () {
                    alert('Ошибка');
                }
            });
        }
        //

        model.exercisesStats = [];
        Object.keys(data.exercisesStats).forEach(function (key) {
            var exerciseStats = data.exercisesStats[key];
            model.exercisesStats[key.toString()] = exerciseStats.map(function (exerciseStat) {
                var date = new Date(exerciseStat.date);
                return {
                    date: new Date(date.getFullYear(), date.getMonth(), date.getDate()),
                    speed: exerciseStat.speed
                };
            });
        });

        options = {
            chart: {
                title: 'Прогресс скорости по упражнениям',
                subtitle: 'в УВМ'
            },
            width: 700,
            height: 500,
            chartArea: {
                width: '50%',
                height: '100%',
                left: 38,
                right: 38
            },
            legend: {
                position: 'top',
                textStyle: {
                    color: 'blue',
                    fontSize: 16
                }
            },
            curveType: 'function'
        };


        model.getLessonByGuitarTechnique = function (guitarTechnique) {
            return model.lessons.filter(function (lesson) {
                return lesson.guitarTechniqueId === guitarTechnique.id;
            });
        };
        model.getExercisesByLesson = function (lesson) {
            return model.exercises.filter(function (exercise) {
                return exercise.lessonId === lesson.id;
            });
        };
        var redrawGraph = ko.computed(function () {
            graphData = undefined;
            graphData = new google.visualization.DataTable();
            graphData.addColumn('date', 'Дата');
            var startDate = new Date();
            startDate.setDate(startDate.getDate() - model.graphInterval());
            var exercisesRaw = {};
            model.drawExercise.forEach(function (needDraw, exerciseId) {
                if (needDraw()) {
                    graphData.addColumn('number', 'Упражнение ' + exerciseId + '  ');
                    var exerciseRaw = [];
                    for (var i = 0; i <= model.graphInterval() ; i++) {
                        var date = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());
                        date.setDate(date.getDate() + i);
                        var exerciseStats = model.exercisesStats[exerciseId];
                        var exerciseStat = exerciseStats.filter(function (exerciseStat) {
                            return exerciseStat.date.getFullYear() === date.getFullYear() && exerciseStat.date.getMonth() === date.getMonth() && exerciseStat.date.getDate() === date.getDate();
                        });
                        if (exerciseStat.length > 0) {
                            exerciseRaw[i] = exerciseStat[0].speed;
                        } else {
                            exerciseRaw[i] = 0;
                        }
                    }
                    exercisesRaw[exerciseId.toString()] = exerciseRaw;
                }
            });
            var raws = [];
            for (var i = 0; i <= model.graphInterval() ; i++) {
                var date = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());
                date.setDate(date.getDate() + i);
                var raw = [];
                raw.push(date);
                Object.keys(exercisesRaw).forEach(function (key) {
                    var exerciseRaw = exercisesRaw[key];
                    raw.push(exerciseRaw[i]);
                });
                raws.push(raw);
            }
            graphData.addRows(raws);
            if (raws[0].length > 1) {
                chart = new google.charts.Line(document.getElementById('linechart_material'));
                chart.draw(graphData, options);
            }
        });

        return model;
    }
</script>
